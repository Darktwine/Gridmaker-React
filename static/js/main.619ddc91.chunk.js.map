{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","className","onClick","handleApplyColor","TableRow","cells","i","numCols","push","Table","addRow","addedRows","state","numRows","setState","bgColorRow","addColumn","addedCols","bgColorCol","removeRow","removeColumn","fillAll","tableCell","document","getElementsByTagName","console","log","length","style","backgroundColor","selectedColor","fillUncolored","uncoloredCells","handleColorChange","event","target","value","clear","rows","this","onChange","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oRAIiBA,MAJjB,SAAmBC,GACf,OAAO,oBAAIC,UAAU,SAASC,QAASF,EAAMG,oBCWlCC,MAVf,SAAkBJ,GAGhB,IAFA,IAAIK,EAAQ,GAEHC,EAAI,EAAGA,EAAIN,EAAMO,QAASD,IAC/BD,EAAMG,KAAK,cAAC,EAAD,CAAWL,iBAAkBH,EAAMG,oBAGlD,OAAO,6BAAKE,KC4KCI,G,wDA/Kb,aAAe,IAAD,8BACZ,gBAQFC,OAAS,WACP,IAAIC,EAAY,EAAKC,MAAMC,QAAU,EAIzB,IAHD,EAAKD,MAAML,QAKpB,EAAKO,UAAS,SAAAF,GACV,MAAO,CACLC,QAASF,EACTJ,QAASK,EAAML,QAAU,MAKxB,EAAKK,MAAMG,WAAa,EAAKH,MAAMC,QAC1C,EAAKC,SAAS,CACZC,WAAY,EAAKH,MAAMC,QACvBA,QAAS,EAAKD,MAAMC,QAAU,IAIhC,EAAKC,UAAS,SAAAF,GACV,MAAO,CAACC,QAASD,EAAMC,QAAU,OAhC3B,EAqCdG,UAAY,WACV,IAAIC,EAAY,EAAKL,MAAML,QAAU,EAIzB,IAHD,EAAKK,MAAMC,QAKpB,EAAKC,UAAS,SAAAF,GACV,MAAO,CACLC,QAASD,EAAMC,QAAU,EACzBN,QAASU,MAKR,EAAKL,MAAMM,WAAa,EAAKN,MAAML,QAC1C,EAAKO,SAAS,CACZI,WAAY,EAAKN,MAAML,QACvBA,QAAS,EAAKK,MAAML,QAAU,IAIhC,EAAKO,UAAS,SAAAF,GACV,MAAO,CAACL,QAASK,EAAML,QAAU,OA5D3B,EAiEdY,UAAY,WAEiB,IAAvB,EAAKP,MAAMC,SAKf,EAAKC,SAAS,CACZD,QAAS,EAAKD,MAAMC,QAAU,KAzEpB,EA6EdO,aAAe,WAEc,IAAvB,EAAKR,MAAML,SAKf,EAAKO,SAAS,CACZP,QAAS,EAAKK,MAAML,QAAU,KArFpB,EAyFdc,QAAU,WACR,IAAIC,EAAYC,SAASC,qBAAqB,MAC9CC,QAAQC,IAAIJ,EAAUK,QACtB,IAAK,IAAIrB,EAAI,EAAGA,EAAIgB,EAAUK,OAAQrB,IAClCgB,EAAUhB,GAAGsB,MAAMC,gBAAkB,EAAKjB,MAAMkB,eA7FxC,EAiGdC,cAAgB,WAGd,IAFA,IAAIC,EAAiB,GACjBV,EAAYC,SAASC,qBAAqB,MACrClB,EAAG,EAAGA,EAAIgB,EAAUK,OAAQrB,IAGS,UAAvCgB,EAAUhB,GAAGsB,MAAMC,iBAAwE,KAAvCP,EAAUhB,GAAGsB,MAAMC,kBAE1EP,EAAUhB,GAAGsB,MAAMC,gBAAkB,EAAKjB,MAAMkB,eAIpD,IAAK,IAAIxB,EAAI,EAAGA,EAAI0B,EAAeL,OAAQrB,IAEzC0B,EAAe1B,GAAGsB,MAAMC,gBAAkB,EAAKjB,MAAMkB,eA/G3C,EAmHdG,kBAAoB,SAACC,GACnB,EAAKpB,SAAS,CAACgB,cAAeI,EAAMC,OAAOC,SApH/B,EAuHdjC,iBAAmB,SAAC+B,GAClBA,EAAMC,OAAOP,MAAMC,gBAAkB,EAAKjB,MAAMkB,eAxHpC,EA2HdO,MAAQ,WAGN,IAFA,IAAIf,EAAYC,SAASC,qBAAqB,MAErClB,EAAI,EAAGA,EAAIgB,EAAUK,OAAQrB,IAEpCgB,EAAUhB,GAAGsB,MAAMC,gBAAkB,SA9HvC,EAAKjB,MAAQ,CACXC,QAAS,EACTN,QAAS,EACTuB,cAAe,OALL,E,0CAoId,WAGE,IAFA,IAAIQ,EAAO,GAEFhC,EAAI,EAAGA,EAAIiC,KAAK3B,MAAMC,QAASP,IACtCgC,EAAK9B,KAAK,cAAC,EAAD,CAAUD,QAASgC,KAAK3B,MAAML,QAASJ,iBAAkBoC,KAAKpC,oBAG1E,OACE,gCACE,wBAAQD,QAASqC,KAAK7B,OAAtB,qBACA,wBAAQR,QAASqC,KAAKvB,UAAtB,wBACA,wBAAQd,QAASqC,KAAKpB,UAAtB,wBACA,wBAAQjB,QAASqC,KAAKnB,aAAtB,2BACA,wBAAQlB,QAASqC,KAAKR,cAAtB,kCACA,wBAAQ7B,QAASqC,KAAKlB,QAAtB,sBACA,wBAAQnB,QAASqC,KAAKF,MAAtB,mBACA,yBAAQG,SAAUD,KAAKN,kBAAvB,UACE,wBAAQG,MAAM,MAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,0BAGF,gCACGE,W,GAzKSG,cCiCLC,MARf,WACE,OACE,qBAAKzC,UAAU,MAAf,SACE,cAAC,EAAD,OCrBS0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASgC,eAAe,SAM1BZ,M","file":"static/js/main.619ddc91.chunk.js","sourcesContent":["function TableCell(props) {\n    return <td className=\"square\" onClick={props.handleApplyColor}></td>\n  }\n  \n  export default TableCell;","import TableCell from \"./TableCell\";\n\nfunction TableRow(props) {\n  let cells = [];\n  \n  for (let i = 0; i < props.numCols; i++) {\n      cells.push(<TableCell handleApplyColor={props.handleApplyColor}/>)\n  }\n  \n  return <tr>{cells}</tr>\n}\n\nexport default TableRow;","\nimport { Component } from \"react\";\nimport TableRow from \"./TableRow\";\nimport './Table.css';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.state = {\n      numRows: 0,\n      numCols: 0,\n      selectedColor: \"red\",\n    };\n  }\n\n  addRow = () => {\n    let addedRows = this.state.numRows + 1; //add to the row count\n    let cols = this.state.numCols; //gets amount of columns\n\n    //if there are 0 columns\n    if(cols === 0){\n      //set the state \n      this.setState(state => {\n          return {\n            numRows: addedRows,\n            numCols: state.numCols + 1,\n          }\n      });\n    }\n    //prevents new rows from having background color\n    else if (this.state.bgColorRow > this.state.numRows) {\n      this.setState({\n        bgColorRow: this.state.numRows,\n        numRows: this.state.numRows + 1,\n      })\n    }\n    else{\n      this.setState(state => {\n          return {numRows: state.numRows + 1}\n      });\n    }\n  }\n\n  addColumn = () => {\n    let addedCols = this.state.numCols + 1; //add to the col count\n    let rows = this.state.numRows; //get amount of rows\n\n    //if there are 0 rows\n    if(rows === 0){\n      //set state\n      this.setState(state => {\n          return {\n            numRows: state.numRows + 1,\n            numCols: addedCols,\n          }\n      });\n    }\n    //prevents new columns from having background color\n    else if (this.state.bgColorCol > this.state.numCols) {\n      this.setState({\n        bgColorCol: this.state.numCols,\n        numCols: this.state.numCols + 1,\n      })\n    }\n    else{\n      this.setState(state => {\n          return {numCols: state.numCols + 1}\n      });\n    }\n  }\n\n  removeRow = () => {\n    // if the current number of rows is zero, do nothing\n    if (this.state.numRows === 0) {\n      return;\n    }\n\n    // decrease the number of rows by 1\n    this.setState({\n      numRows: this.state.numRows - 1,\n    })\n  }\n\n  removeColumn = () => {\n    // if the current number of columns is zero, do nothing\n    if (this.state.numCols === 0) {\n      return;\n    }\n\n    // decrease the number of columns by 1\n    this.setState({\n      numCols: this.state.numCols - 1,\n    })\n  }\n\n  fillAll = () => {\n    let tableCell = document.getElementsByTagName(\"td\");\n    console.log(tableCell.length);\n    for (let i = 0; i < tableCell.length; i++) {\n        tableCell[i].style.backgroundColor = this.state.selectedColor;\n    }\n  }\n    \n  fillUncolored = () => {\n    let uncoloredCells = [];\n    let tableCell = document.getElementsByTagName(\"td\");\n    for (let i =0; i < tableCell.length; i++)\n    { //checks if background color for each cell is undefined. \n      //if true set background color\n      if ((tableCell[i].style.backgroundColor === \"white\") || (tableCell[i].style.backgroundColor === \"\")) \n      {\n        tableCell[i].style.backgroundColor = this.state.selectedColor;\n      }\n    }\n    //fills every uncolored cell with the selected color\n    for (let i = 0; i < uncoloredCells.length; i++)\n    {\n      uncoloredCells[i].style.backgroundColor = this.state.selectedColor; \n    }\n  }\n\n  handleColorChange = (event) => {\n    this.setState({selectedColor: event.target.value});\n  }\n\n  handleApplyColor = (event) => {\n    event.target.style.backgroundColor = this.state.selectedColor;\n  }\n  \n  clear = () => {\n    let tableCell = document.getElementsByTagName(\"td\");\n    // clear every cell\n    for (let i = 0; i < tableCell.length; i++) \n    {\n      tableCell[i].style.backgroundColor = \"white\";\n    }\n  }\n\n  render() {\n    let rows = [];\n\n    for (let i = 0; i < this.state.numRows; i++) {\n      rows.push(<TableRow numCols={this.state.numCols} handleApplyColor={this.handleApplyColor} />);\n    }\n\n    return (\n      <div>\n        <button onClick={this.addRow}>Add Row</button>\n        <button onClick={this.addColumn}>Add Column</button>\n        <button onClick={this.removeRow}>Remove Row</button>\n        <button onClick={this.removeColumn}>Remove Column</button>\n        <button onClick={this.fillUncolored}>Fill Uncolored Cells</button>\n        <button onClick={this.fillAll}>Fill All</button>\n        <button onClick={this.clear}>Clear</button>\n        <select onChange={this.handleColorChange}>\n          <option value=\"red\">red</option>\n          <option value=\"blue\">blue</option>\n          <option value=\"yellow\">yellow</option>\n          <option value=\"orange\">orange</option>\n          <option value=\"green\">green</option>\n          <option value=\"indigo\">indigo</option>\n          <option value=\"violet\">violet</option>\n          <option value=\"gray\">gray</option>\n          <option value=\"black\">black</option>\n          <option value=\"pink\">pink</option>\n          <option value=\"lime\">lime</option>\n          <option value=\"aqua\">aqua</option>\n          <option value=\"navy\">navy</option>\n          <option value=\"brown\">brown</option>\n          <option value=\"silver\">silver</option>\n          <option value=\"chocolate\">chocolate</option>\n\n        </select>\n        <table>\n          {rows}\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default Table;","// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React from 'react';\nimport './App.css';\nimport Table from './components/Table';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}